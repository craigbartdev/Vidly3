using System;
using System.Data.Entity; //for Include
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly3.Models;
using Vidly3.Dtos;
using AutoMapper;

namespace Vidly3.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;
        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //changed all types from Customer to CustomerDto after adding Dto and AutoMapper

        //GET /api/customers
        public IEnumerable<CustomerDto> GetCustomers()
        {
            ////before dtos
            //return _context.Customers.ToList();

            //after dtos and automapper use Linq Select
            //do not call the mapper method with (). delegate it by ommitting ()
            //MembershipType will be mapped to MembershipTypeDto, because that is what we have in CustomerDto
            return _context.Customers.Include(c => c.MembershipType).ToList().Select(Mapper.Map<Customer, CustomerDto>);
        }

        //GET /api/customers/1
        //change fron CustomerDto return type to IHttpActionResult
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            ////return status codes in an api not actions. 404 here
            ////from before IHttpActionResult
            //if (customer == null)
            //    throw new HttpResponseException(HttpStatusCode.NotFound);

            if (customer == null)
                return NotFound();

            //return customer as dto. before ihttpactionresult
            //return Mapper.Map<Customer, CustomerDto>(customer);

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //POST /api/customers
        //could also call this PostCustomer which would not need the [HttpPost]
        //replaced CustomerDto with IHttpActionResult to get 201 response
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            //if invalid format on post 400 error, throw exception
            if (!ModelState.IsValid)
                return BadRequest(); //from IHttpActionResult

            //map dto to customer
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);

            //add to context and save to db
            _context.Customers.Add(customer);
            _context.SaveChanges();

            //give the Dto the id that is generated by the database
            customerDto.Id = customer.Id;

            //before IHttpActionResult
            //return customerDto;

            //after IHttpActionResult. return object created at uri
            //comment out the Min18 thing data annotation in the Dto
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //PUT /api/customers/1
        //return customer or void. either works
        //id is read from url, while customer comes from request body
        //kept the void type because it gives correct 204 error
        [HttpPut]
        public void UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            //get the customer in the db by id
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //404 if customer id not in db
            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            //map customerDto changes to customerInDb
            //mapper automatically can tell the source and target types
            //does not work because dto includes Id
            //fixed by adding optional Ignore in MappingProfile
            Mapper.Map(customerDto, customerInDb);

            //from before dto and automapper
            //update fields of customer in db manually
            //customerInDb.Name = customerDto.Name;
            //customerInDb.Birthdate = customerDto.Birthdate;
            //customerInDb.IsSubscribedToNewsletter = customerDto.IsSubscribedToNewsletter;
            //customerInDb.MembershipTypeId = customerDto.MembershipTypeId;

            _context.SaveChanges();
        }

        //DELETE /api/customers/1
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            //get the customer in the db by id
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //404 if customer id not in db
            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            
        }
    }
}
